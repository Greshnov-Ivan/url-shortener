// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/url_shortener_service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"
	entity "url-shortener/internal/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockHashing is a mock of Hashing interface.
type MockHashing struct {
	ctrl     *gomock.Controller
	recorder *MockHashingMockRecorder
}

// MockHashingMockRecorder is the mock recorder for MockHashing.
type MockHashingMockRecorder struct {
	mock *MockHashing
}

// NewMockHashing creates a new mock instance.
func NewMockHashing(ctrl *gomock.Controller) *MockHashing {
	mock := &MockHashing{ctrl: ctrl}
	mock.recorder = &MockHashingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHashing) EXPECT() *MockHashingMockRecorder {
	return m.recorder
}

// DecodeInt64WithError mocks base method.
func (m *MockHashing) DecodeInt64WithError(hash string) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeInt64WithError", hash)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeInt64WithError indicates an expected call of DecodeInt64WithError.
func (mr *MockHashingMockRecorder) DecodeInt64WithError(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeInt64WithError", reflect.TypeOf((*MockHashing)(nil).DecodeInt64WithError), hash)
}

// EncodeInt64 mocks base method.
func (m *MockHashing) EncodeInt64(numbers []int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeInt64", numbers)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeInt64 indicates an expected call of EncodeInt64.
func (mr *MockHashingMockRecorder) EncodeInt64(numbers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeInt64", reflect.TypeOf((*MockHashing)(nil).EncodeInt64), numbers)
}

// MockLinkRepository is a mock of LinkRepository interface.
type MockLinkRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLinkRepositoryMockRecorder
}

// MockLinkRepositoryMockRecorder is the mock recorder for MockLinkRepository.
type MockLinkRepositoryMockRecorder struct {
	mock *MockLinkRepository
}

// NewMockLinkRepository creates a new mock instance.
func NewMockLinkRepository(ctrl *gomock.Controller) *MockLinkRepository {
	mock := &MockLinkRepository{ctrl: ctrl}
	mock.recorder = &MockLinkRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLinkRepository) EXPECT() *MockLinkRepositoryMockRecorder {
	return m.recorder
}

// CreateLink mocks base method.
func (m *MockLinkRepository) CreateLink(ctx context.Context, sourceUrl string, expiresAt *time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLink", ctx, sourceUrl, expiresAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLink indicates an expected call of CreateLink.
func (mr *MockLinkRepositoryMockRecorder) CreateLink(ctx, sourceUrl, expiresAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLink", reflect.TypeOf((*MockLinkRepository)(nil).CreateLink), ctx, sourceUrl, expiresAt)
}

// GetLinkById mocks base method.
func (m *MockLinkRepository) GetLinkById(ctx context.Context, id int64) (*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkById", ctx, id)
	ret0, _ := ret[0].(*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkById indicates an expected call of GetLinkById.
func (mr *MockLinkRepositoryMockRecorder) GetLinkById(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkById", reflect.TypeOf((*MockLinkRepository)(nil).GetLinkById), ctx, id)
}

// GetLinkBySourceUrl mocks base method.
func (m *MockLinkRepository) GetLinkBySourceUrl(ctx context.Context, sourceUrl string) (*entity.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLinkBySourceUrl", ctx, sourceUrl)
	ret0, _ := ret[0].(*entity.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLinkBySourceUrl indicates an expected call of GetLinkBySourceUrl.
func (mr *MockLinkRepositoryMockRecorder) GetLinkBySourceUrl(ctx, sourceUrl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLinkBySourceUrl", reflect.TypeOf((*MockLinkRepository)(nil).GetLinkBySourceUrl), ctx, sourceUrl)
}

// UpdateExpires mocks base method.
func (m *MockLinkRepository) UpdateExpires(ctx context.Context, id int64, expires_at *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExpires", ctx, id, expires_at)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExpires indicates an expected call of UpdateExpires.
func (mr *MockLinkRepositoryMockRecorder) UpdateExpires(ctx, id, expires_at interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExpires", reflect.TypeOf((*MockLinkRepository)(nil).UpdateExpires), ctx, id, expires_at)
}

// UpdateLastRequested mocks base method.
func (m *MockLinkRepository) UpdateLastRequested(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastRequested", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastRequested indicates an expected call of UpdateLastRequested.
func (mr *MockLinkRepositoryMockRecorder) UpdateLastRequested(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastRequested", reflect.TypeOf((*MockLinkRepository)(nil).UpdateLastRequested), ctx, id)
}
